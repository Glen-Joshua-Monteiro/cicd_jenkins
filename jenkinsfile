/* 
File Name : Jenkinsfile 

Version : 0.0.1

Purpose : Implementation of automated CICD Pipeline using Jenkins

Authors : glenj.monteiro@gmail.com
*/

pipeline {

    parameters {
        hidden(name: 'IMAGE_TAG', defaultValue: '', description: '')
        hidden(name: 'RELEASE_VERSION', defaultValue: '', description: '')
    }

    agent any

    stages {
        // Code Checkout Stage (Branch Name can be dynamically passed too)
        stage('Git Checkout Stage') {
            steps {
                //Clear Workspace before starting the pipeine
                cleanWs()
                
                //Git Checkout
                echo "Repository URL : "+env.REPO_URL
                echo "Branch Chosen : "+env.BRANCH_NAME
                checkout scmGit( branches: [[name: env.BRANCH_NAME]], 
                                             extensions: [], 
                                             userRemoteConfigs: [[credentialsId: 'git_credentials', url: env.REPO_URL]]
                )
                
                // Extract Relase Version
                script {
                    def APP_VERSION = readFile(file: 'app.version')
                    echo "App Version : "+APP_VERSION
                    env.RELEASE_VERSION=APP_VERSION
                    env.RELEASE_VERSION=env.RELEASE_VERSION.trim()
                }
            }
        }

        // Build Stage segregated by the type of Build opted
        stage('Image Build Stage') {
            parallel {

                stage ('Create Tag') {
                    steps {
                        echo "Image Registry URL : "+env.REGISTRY_URL
                        echo "Containerization Method : "+env.BUILD_TYPE
               
                        script {
                            def TAG=env.REGISTRY_URL+":"+env.RELEASE_VERSION
                            env.IMAGE_TAG=TAG   
                            env.IMAGE_TAG=env.IMAGE_TAG.trim()
                            echo env.IMAGE_TAG
                        }
                    }
                }
                
                // Building image using Docker Build
                stage ('Build Tag - Docker') {
                    when {
                        expression { env.BUILD_TYPE == 'docker' }
                    }
                    steps {
                        echo "Containerization Method : "+env.BUILD_TYPE
                        sh "whoami"
                        script {  
                            docker.withRegistry(env.image_registry, 'docker_credentials') {
                                def svcImageBuild = docker.build(env.IMAGE_TAG, ".")
                                svcImageBuild.push()
                            }                
                        }
                    }
                }
                
                // Building image using Build X
                stage ('Build Tag - BuildX') {
                    when {
                        expression { env.BUILD_TYPE == 'buildx' }
                    }
                    steps {
                        echo "Containerization Method : "+env.BUILD_TYPE
                        echo "Image Tag : "+env.IMAGE_TAG
                        sh "whoami"
                        sh "pwd"
                        sh "docker buildx inspect --bootstrap"
                        sh "docker buildx build --tag ${env.IMAGE_TAG} . --load"
                        script{
                            docker.withRegistry(env.image_registry, 'docker_credentials') {
                                def svcImage = docker.image(env.IMAGE_TAG)
                                svcImage.push()
                            }
                        }
                    }
                }
                
                // Building image using Build Pack
                stage ('Build Tag - Build Pack') {
                    when {
                        expression { env.BUILD_TYPE == 'buildpack' }
                    }
                    steps {
                        echo "Containerization Method :"+env.BUILD_TYPE
                        sh "whoami"
                        sh "pwd"
                        sh "/usr/local/bin/pack build ${env.IMAGE_TAG} --builder paketobuildpacks/builder:0.3.101-base"
                        script{
                            docker.withRegistry(env.image_registry, 'docker_credentials') {
                                def svcImage = docker.image(env.IMAGE_TAG)
                                svcImage.push()
                            }
                        }
                    }
                }
            }
        }
        
        // Replacing Tags and Deploying on Kubernetes Cluster
        stage ('Deploying to Kubernetes Cluster') {
            steps {
                script{
                    
                    def RELEASE_NUMBER="dev-"+env.RELEASE_VERSION
                    RELEASE_NUMBER=RELEASE_NUMBER.trim()
                    
                    // Replacing Tags
                    def layer_1 = readFile("deploy/deployment.yaml").replace('${image_path}', env.REGISTRY_URL)
                    writeFile file: "temp.yaml", text: layer_1

                    def layer_2 = readFile("temp.yaml").replace('${RELEASE_NUMBER}', RELEASE_NUMBER)
                    writeFile file: "final.yaml", text: layer_2
                }
                
                // Deploying to K8s cluster
                withKubeConfig(caCertificate: '', clusterName: 'KubernetesEnv', contextName: '', credentialsId: 'config (KUBECONFIG)', namespace: '', restrictKubeConfigAccess: true, serverUrl: env.k8s_cluster) {
                    sh "kubectl apply -f final.yaml"
                }
            }
        }
    }

    post{
        success{
            emailext to: env.EMAIL_RECIPIENTS,
            subject: "${env.JOB_NAME} EXECUTION COMPLETE",
            body: """Dear User, 

The pipeline triggered with the Job Name: ${env.JOB_NAME} has executed successfully.
Below are the details of the build: 

Branch Triggered:- ${env.BRANCH_NAME}

App Version:- ${env.RELEASE_VERSION}

Image Created:- ${env.IMAGE_TAG}

Please refer to the attached logs for more details

Best Regards,
DevOps/SRE Team""",
            attachLog: true
        }

        failure{
            emailext to: env.EMAIL_RECIPIENTS,
            subject: "${env.JOB_NAME} FAILURE",
            body: """Dear User, 

The pipeline triggered with the Job Name: ${env.JOB_NAME} has Failed.

Please refer to the attached logs for more details

Best Regards,
DevOps/SRE Team""",
            attachLog: true
        }
    }
}
